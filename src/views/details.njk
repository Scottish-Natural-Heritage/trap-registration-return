{% extends "_base.njk" %}

{% set otherSpeciesCaughtErrors %}
  {% if model.currentOtherSpeciesCaughtError %}
    Enter the name of the non-target species caught
    {% elif model.invalidCharsOtherSpecies %}
    Name of the non-target species caught must only include letters a to z, and special characters such as hyphens, spaces and apostrophes
  {% endif %}
{% endset -%}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="{{pathPrefix}}/accessible-autocomplete/accessible-autocomplete.min.css">
  <script src="{{pathPrefix}}/accessible-autocomplete/accessible-autocomplete.min.js"></script>
{% endblock %}

{% from "govuk/components/error-summary/macro.njk" import govukErrorSummary %}
{% from "govuk/components/radios/macro.njk" import govukRadios %}
{% from "govuk/components/fieldset/macro.njk" import govukFieldset %}
{% from "govuk/components/input/macro.njk" import govukInput %}
{% from "govuk/components/select/macro.njk" import govukSelect %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/textarea/macro.njk" import govukTextarea %}
{% from "govuk/components/accordion/macro.njk" import govukAccordion %}

{% block content %}

  {% if model.detailsError %}
    {{ govukErrorSummary({
      titleText: "There is a problem",
      errorList: [
        {
          text: "Enter a grid reference",
          href: "#current-grid-reference-error"
        } if model.currentGridReferenceError,
        {
          text: "Select the type of non-target species caught",
          href: "#current-species-caught-option-error"
        } if model.currentSpeciesCaughtOptionError,
        {
          text: "Enter the non-target species caught",
          href: "#current-species-caught-error"
        } if model.currentSpeciesCaughtError,
        {
          text: "Enter the name of the non-target species caught",
          href: "#current-other-species-caught-error"
        } if model.currentOtherSpeciesCaughtError,
        {
          text: "Enter the number of non-target species caught",
          href: "#current-number-caught-error"
        } if model.currentNumberCaughtError,
        {
          text: "Select the trap type that was used",
          href: "#current-trap-type-error"
        } if model.currentTrapTypeError,
        {
          text: "Name of the non-target species caught must only include letters a to z, and special characters such as hyphens, spaces and apostrophes",
          href: "#current-other-species-caught-error"
        } if model.invalidCharsOtherSpecies,
        {
          text: "More detail must only include letters a to z, and special characters such as hyphens, spaces and apostrophes",
          href: "#current-comment-error"
        } if model.invalidCharsComment
      ]
    }) }}
  {% endif %}

  {% set scheduleHtml %}

  <div class="govuk-form-group {% if model.currentSpeciesCaughtError %} govuk-form-group--error {% endif %}">
    {% if model.currentSpeciesCaughtError %}
      <span id="current-species-caught-error" class="govuk-error-message">
        <span class="govuk-visually-hidden">Error:</span> Enter the non-target species caught
      </span>
    {% endif %}
    <select id="current-species-caught" name="currentSpeciesCaught">
      <option disabled selected value> -- select an option -- </option>
      {% for species in model.nonTargetSpecies %}
        <option value="{{ species.value }}" {% if model.currentSpeciesCaught === species.value %} selected {% endif %}>{{ species.text }}</option>
      {% endfor %}
    </select>
  </div>

  {% endset -%}

  {% set otherHtml %}
    {{ govukInput({
      label: {
        text: "Non-target species caught"
      },
      hint: {
        text: "The name of the type of non-target species caught"
      },
      classes: "govuk-!-width-one-half",
      id: "current-other-species-caught",
      name: "currentOtherSpeciesCaught",
      value: model.currentOtherSpeciesCaught,
      errorMessage: {
        html: otherSpeciesCaughtErrors
      } if model.currentOtherSpeciesCaughtError or model.invalidCharsOtherSpecies,
      attributes: {
        spellcheck: "false"
      }
    }) }}
  {% endset -%}

  <form method="post">

    <div class="govuk-grid-row">
      <div class="govuk-grid-column-two-thirds">

        {% call govukFieldset({
          legend: {
          text: "What are the details of the non-target species you caught?",
          classes: "govuk-fieldset__legend--l",
          isPageHeading: true
          }
        }) %}

          <p class="govuk-body">
            If you caught more than one type of non-target species, you will be able to add any additional on the next page.
          </p>

          {{ govukInput({
            label: {
              text: "Trap location"
            },
            hint: {
              html: "An 8 or 10 digit grid reference. e.g. NH&nbsp;6381&nbsp;4403 or NO&nbsp;08529&nbsp;29128."
            },
            classes: "govuk-!-width-one-half govuk-heading-m",
            id: "current-grid-reference",
            name: "currentGridReference",
            value: model.currentGridReference,
            errorMessage: {
              text: "Enter a grid reference"
            } if model.currentGridReferenceError,
            attributes: {
              spellcheck: "false"
            }
          }) }}

          {{ govukRadios({
            idPrefix: "current-species-caught-option",
            name: "currentSpeciesCaughtOption",
            value: model.currentSpeciesCaughtOption,
            fieldset: {
              legend: {
                text: "Non-target species caught",
                isPageHeading: true,
                classes: "govuk-heading-m"
              }
            },
            errorMessage: {
              text: "Select the type of non-target species caught"
            } if model.currentSpeciesCaughtOptionError,
            items: [
              {
                value: "schedule1Birds",
                text: "A raptor or Schedule 1 bird",
                checked: model.currentSpeciesCaughtOption === "schedule1Birds",
                conditional: {
                  html: scheduleHtml
                }
              },
              {
                value: "otherSpecies",
                text: "An animal or bird not listed above",
                checked: model.currentSpeciesCaughtOption === "otherSpecies",
                conditional: {
                  html: otherHtml
                }
              }
            ]
          }) }}

          {{ govukInput({
            label: {
              text: "Number caught"
            },
            hint: {
              text: "How many of this non-target species did you catch?"
            },
            classes: "govuk-!-width-one-half govuk-heading-m",
            id: "current-number-caught",
            name: "currentNumberCaught",
            value: model.currentNumberCaught,
            errorMessage: {
              text: "Enter the number of non-target species caught"
            } if model.currentNumberCaughtError,
            attributes: {
              spellcheck: "false"
            }
          }) }}

          {{ govukRadios({
            idPrefix: "current-trap-type",
            name: "currentTrapType",
            fieldset: {
              legend: {
                text: "Trap type",
                isPageHeading: true,
                classes: "govuk-heading-m"
              }
            },
            errorMessage: {
              text: "Select the trap type that was used"
            } if model.currentTrapTypeError,
            items: [
              {
                value: "Larsen mate",
                text: "Larsen mate",
                checked: model.currentTrapType === "Larsen mate"
              },
              {
                value: "Larsen pod",
                text: "Larsen pod",
                checked: model.currentTrapType === "Larsen pod"
              }
            ]
          }) }}

          {{ govukTextarea({
            name: "currentComment",
            id: "current-comment",
            classes: "govuk-!-width-one-half govuk-heading-m",
            label: {
              text: "More detail"
            },
            value: model.currentComment,
            hint: {
              text: "Provide any additional details e.g. same bird caught twice, or released unharmed"
            },
            errorMessage: {
              text: "More detail must only include letters a to z, and special characters such as hyphens, spaces and apostrophes"
            } if model.invalidCharsComment
          }) }}

        {% endcall %}

        {{ govukButton({
          text: "Continue",
          classes: "naturescot-forward-button"
        }) }}

      </div>

      <div class="govuk-grid-column-one-third">

        {{ govukAccordion({
          id: "schedule1BirdExplanation",
          items: [
            {
              heading: {
                text: "What is a Schedule 1 bird?"
              },
              content: {
                html: '' +
                '<p class="govuk-body">' +
                '  A <a target="_blank" href="https://www.nature.scot/protected-species-list-wca-schedules-1-1a-a1-2-3-and-4">Schedule 1 bird (opens in new tab)</a> is a bird listed on' +
                '  Schedule 1 of the Wildlife &amp Countryside Act 1981.' +
                '</p>'
              },
              expanded: false
            }
          ]
        }) }}

      </div>

    </div>
  </form>

{% endblock %}
